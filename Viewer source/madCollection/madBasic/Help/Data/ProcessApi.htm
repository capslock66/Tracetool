<html>

  <head>
    <title>mad* Help...</title>
    <meta name="description" content="mad* Help...">
    <meta name="keywords" content="madshi, components, delphi">
    <meta http-equiv="expires" content="900">
    <link rel=stylesheet type="text/css" href="style.css">
  </head>

  <body background="bcklight.gif" bgcolor=#F8F8F8>
    <table border=0 cellpadding=0 callspacing=0><tr>
      <td valign=bottom>
        <table border=0 cellpadding=0 cellspacing=0><tr><td bgcolor=#D8D8D8>
          <table cellpadding=3 border=0>
            <tr><td bgcolor=#FFFFF0>
              <div id="verySmall"><br></div>
              <div id="bigTitle">&nbsp;"ProcessAPI" Example&nbsp;</div>
              <div id="verySmall"><br></div>
              <div id="small">
                <a class="small" href="Content.htm">Content</a> /
                <a class="small" href="madCodeHook.htm">madCodeHook</a> /
                <a class="small" href="ApiCodeHooking.htm">API/Code Hooking</a> /...
              </div>
            </td></tr>
          </table>
        </td></tr></table>
      </td>
      <td valign=bottom>
        <table border=0 cellpadding=0 cellspacing=0><tr><td bgcolor=#D8D8D8>
          <table cellpadding=7 border=0>
            <tr><td bgcolor=#F4F4F8><a href="http://www.madshi.net">www.madshi.net</a></td></tr>
          </table>
        </td></tr></table>
      </td>
    </tr></table>
    <p>The following project can also be found in the "Demo" folder:</p>
    <table width=100% cellpadding=0 border=0>
      <tr>
        <td bgcolor=#D8D8D8>
          <table width=100% cellpadding=10 border=0>
            <tr>
              <td bgcolor=#F8F0F0><img src='px.gif'></td>
              <td width=100% bgcolor=#F4F4F8>
                <span id='mono'>
                  <span id='comment'>// ***************************************************************</span><br>
                  <span id='comment'>// &nbsp;ProcessAPI &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;version: &nbsp;1.0 &nbsp;&nbsp;· &nbsp;date: 2003-06-15</span><br>
                  <span id='comment'>// &nbsp;-------------------------------------------------------------</span><br>
                  <span id='comment'>// &nbsp;simple demo to show process wide API hooking</span><br>
                  <span id='comment'>// &nbsp;-------------------------------------------------------------</span><br>
                  <span id='comment'>// &nbsp;Copyright (C) 1999 - 2003 www.madshi.net, All Rights Reserved</span><br>
                  <span id='comment'>// ***************************************************************</span><br>
                  <br>
                  <span id='comment'>// 2003-06-15 1.0 &nbsp;initial release</span><br>
                  <br>
                  <span id='bold'>program</span>&nbsp;<span id='identifier'>ProcessAPI</span>;<br>
                  <br>
                  <span id='comment'>{$R</span>&nbsp;..\<span id='comment'>mad</span>.<span id='comment'>res}</span><br>
                  <br>
                  <span id='bold'>uses</span>&nbsp;<span id='identifier'>Windows</span>, <a class="pascal" href="madCodeHook.htm">madCodeHook</a>;<br>
                  <br>
                  <span id='comment'>// variable for the "next hook", which we then call in the callback function</span><br>
                  <span id='comment'>// it must have *exactly* the same parameters and calling convention as the</span><br>
                  <span id='comment'>// original function</span><br>
                  <span id='comment'>// besides, it's also the parameter that you need to undo the code hook again</span><br>
                  <span id='bold'>var</span>&nbsp;<span id='identifier'>WinExecNextHook</span>&nbsp;: <span id='bold'>function</span>&nbsp;(<span id='identifier'>cmdLine</span>: <span id='identifier'>pchar</span>; <span id='identifier'>showCmd</span>: <span id='identifier'>dword</span>) : <span id='identifier'>dword</span>; <span id='bold'>stdcall</span>;<br>
                  <br>
                  <span id='comment'>// this function is our hook callback function, which will receive</span><br>
                  <span id='comment'>// all calls to the original WinExec API, as soon as we've hooked it</span><br>
                  <span id='comment'>// the hook function must have *exactly* the same parameters and calling</span><br>
                  <span id='comment'>// convention as the original API</span><br>
                  <span id='bold'>function</span>&nbsp;<span id='identifier'>WinExecHookProc</span>(<span id='identifier'>cmdLine</span>: <span id='identifier'>pchar</span>; <span id='identifier'>showCmd</span>: <span id='identifier'>dword</span>) : <span id='identifier'>dword</span>; <span id='bold'>stdcall</span>;<br>
                  <span id='bold'>begin</span><br>
                  &nbsp;&nbsp;<span id='comment'>// check the input parameters and ask whether the call should be executed</span><br>
                  &nbsp;&nbsp;<span id='bold'>if</span>&nbsp;<span id='identifier'>MessageBox</span>(<span id='number'>0</span>, <span id='identifier'>cmdLine</span>, <span id='string'>'Execute?'</span>, <span id='identifier'>MB_YESNO</span>&nbsp;<span id='bold'>or</span>&nbsp;<span id='identifier'>MB_ICONQUESTION</span>) = <span id='identifier'>IDYES</span>&nbsp;<span id='bold'>then</span><br>
                  &nbsp;&nbsp;&nbsp;&nbsp;<span id='comment'>// it shall be executed, so let's do it</span><br>
                  &nbsp;&nbsp;&nbsp;&nbsp;<span id='identifier'>result</span>&nbsp;:= <span id='identifier'>WinExecNextHook</span>(<span id='identifier'>cmdLine</span>, <span id='identifier'>showCmd</span>)<br>
                  &nbsp;&nbsp;<span id='bold'>else</span><br>
                  &nbsp;&nbsp;&nbsp;&nbsp;<span id='comment'>// we don't execute the call, but we should at least return a valid value</span><br>
                  &nbsp;&nbsp;&nbsp;&nbsp;<span id='identifier'>result</span>&nbsp;:= <span id='identifier'>ERROR_ACCESS_DENIED</span>;<br>
                  <span id='bold'>end</span>;<br>
                  <br>
                  <span id='bold'>begin</span><br>
                  &nbsp;&nbsp;<span id='comment'>// we install our hook on the API...</span><br>
                  &nbsp;&nbsp;<span id='comment'>// please note that in this demo the hook only effects our own process!</span><br>
                  &nbsp;&nbsp;<a class="pascal" href="ApiCodeHooking.htm#HookAPI">HookAPI</a>(<span id='string'>'kernel32.dll'</span>, <span id='string'>'WinExec'</span>, @<span id='identifier'>WinExecHookProc</span>, @<span id='identifier'>WinExecNextHook</span>);<br>
                  &nbsp;&nbsp;<span id='comment'>// now call the original (but hooked) API</span><br>
                  &nbsp;&nbsp;<span id='comment'>// as a result of the hook the user will receive our messageBox etc</span><br>
                  &nbsp;&nbsp;<span id='identifier'>WinExec</span>(<span id='string'>'notepad.exe'</span>, <span id='identifier'>SW_SHOWNORMAL</span>);<br>
                  &nbsp;&nbsp;<span id='comment'>// we like clean programming, don't we?</span><br>
                  &nbsp;&nbsp;<span id='comment'>// so we cleanly unhook again</span><br>
                  &nbsp;&nbsp;<a class="pascal" href="ApiCodeHooking.htm#UnhookAPI">UnhookAPI</a>(@<span id='identifier'>WinExecNextHook</span>);<br>
                  <span id='bold'>end</span>.
                </span>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>
  </body>

</html>