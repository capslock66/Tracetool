<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TraceTool</name>
    </assembly>
    <members>
        <member name="T:TraceTool.FontDetail">
            <summary>
            Specify a font detail for traces columns items and members.
            </summary>
        </member>
        <member name="T:TraceTool.ParsedObjectList">
            <summary>
            List of parsed object.
            </summary>
        </member>
        <member name="M:TraceTool.ParsedObjectList.GetKeyForItem(System.Object)">
            <summary>
            This is the only method that absolutely must be overridden,
            because without it the KeyedCollection cannot extract the
            keys from the items. The input parameter type is the 
            second generic type argument, in this case OrderItem, and 
            the return value type is the first generic type argument,
            in this case int.
            </summary>
        </member>
        <member name="M:TraceTool.ParsedObjectList.ContainsKey(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="T:TraceTool.SendMode">
            2 ways to send traces : windows messages or socket messages. Under ASP, you must use Socket
        </member>
        <member name="F:TraceTool.SendMode.WinMsg">
            Windows message
        </member>
        <member name="F:TraceTool.SendMode.Socket">
            Socket message
        </member>
        <member name="F:TraceTool.SendMode.WebSocket">
            Socket message
        </member>
        <member name="F:TraceTool.SendMode.None">
            No messages are send (use local log)
        </member>
        <member name="T:TraceTool.TraceDisplayFlags">
            <summary>
            What information to display
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowModifiers">
            <summary>
            show modifiers (public class,...)
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowClassInfo">
            <summary>
            show class info (assembly,guid,...) and bases classes names
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowFields">
            <summary>
            show fields values
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowCustomAttributes">
            <summary>
            show custom attributes
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowNonPublic">
            <summary>
            show non public (private and protected) members
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowInheritedMembers">
            <summary>
            show Inherited members
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowEvents">
            <summary>
            show events (delegates)
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowMethods">
            <summary>
            show methods and constructors
            </summary>
        </member>
        <member name="F:TraceTool.TraceDisplayFlags.ShowDoc">
            <summary>
            show documentation for type, fields, methods,..
            </summary>
        </member>
        <member name="T:TraceTool.TraceConst">
            <summary>
            Define all const and windows functions used by the TraceTool namespace
            </summary>
        </member>
        <member name="F:TraceTool.TraceConst.WM_COPYDATA">
            <summary> the windows constant to use to send bloc of data across process </summary>
        </member>
        <member name="F:TraceTool.TraceConst.WMD">
            <summary> identification code 'traceTool'. Other code are discarded by the server </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_DEFAULT">
            <summary> Use the default Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_FORM">
            <summary> Use the 'form' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_COMPONENT">
            <summary> Use the 'component' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_CONTROL">
            <summary> Use the 'control' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_PROP">
            <summary> Use the 'property' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_MENU">
            <summary> Use the 'menu' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_MENU_ITEM">
            <summary> Use the 'menu item' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_COLLECT_ITEM">
            <summary> Use the 'Collection Item' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_WARNING">
            <summary> Use the 'warning' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_ERROR">
            <summary> Use the 'Error' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_INFO">
            <summary> Use the 'Info' Icon on the gutter for the trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_NONE">
            <summary> viewer kind : default viewer, no icon</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_DUMP">
            <summary> viewer kind : dump viewer </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_XML">
            <summary> viewer kind : xml viewer </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_TABLE">
            <summary> viewer kind : table viewer </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_STACK">
            <summary> viewer kind : stack </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_BITMAP">
            <summary> viewer kind : bitmap viewer </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_OBJECT">
            <summary> viewer kind : object structure </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_VALUE">
            <summary> viewer kind : object value </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_ENTER">
            <summary> viewer kind : enter method </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_EXIT">
            <summary> viewer kind : exit method </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VIEWER_TXT">
            <summary> viewer kind : text added to default viewer </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_PLUG_ONACTION">
            <summary> Ask to receive OnAction event </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_PLUG_ONBEFOREDELETE">
            <summary>  Ask to receive OnBeforeDelete event </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_PLUG_ONTIMER">
            <summary>  Ask to receive OnTimer event </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RES_BUT_RIGHT">
            <summary> Button on right</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RES_BUT_LEFT">
            <summary> Button on left</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RES_LABEL_RIGHT">
            <summary> Label on right</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RES_LABELH_RIGHT">
            <summary> Label on right HyperLink</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RES_LABEL_LEFT">
            <summary> Label on left</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RES_LABELH_LEFT">
            <summary> Label on left hyperlink</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RES_MENU_ACTION">
            <summary> Item menu in the Actions Menu</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RES_MENU_WINDOW">
            <summary> Item menu in the Windows Menu. Call CreateResource on the main win trace to create this menu item</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_CUT">
            <summary> Cut. Same as copy then delete </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_COPY">
            <summary> Copy </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_DELETE">
            <summary> Delete selected </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_SELECT_ALL">
            <summary> Select all </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_RESIZE_COLS">
            <summary> Resize columns </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_VIEW_INFO">
            <summary> View trace info </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_VIEW_PROP">
            <summary> View properties </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_PAUSE">
            <summary> Pause </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_SAVE">
            <summary> SaveToFile </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_CLEAR_ALL">
            <summary> Clear all </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_CLOSE_WIN">
            <summary> Close win </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_RESUME">
            <summary> Resume from Pause </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_LABEL_INFO">
            <summary> TracesInfo label </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_LABEL_LOGFILE">
            <summary> LabelLogFile label </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_VIEW_MAIN">
            <summary> View Main trace </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_VIEW_ODS">
            <summary> ODS </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_OPEN_XML">
            <summary> XML trace -> Tracetool XML traces </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_EVENTLOG">
            <summary> Event log </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ACTION_TAIL">
            <summary> Tail </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ENTER_DEBUG_MODE">
            <summary>VIEWER INTERNAL : enter debug mode  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_LEAVE_DEBUG_MODE">
            <summary>VIEWER INTERNAL : leave debug mode  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_OPEN_TAIL">
            <summary>VIEWER INTERNAL : Open tail file  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_OPEN_XML">
            <summary>VIEWER INTERNAL : Open xml file on a new window (don't confuse with CST_LOADXML)  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_GET_OBJECT">
            <summary>VIEWER INTERNAL : the user interface ask to retrieve an object  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_FLUSH">
            <summary>Flush remaining traces to server</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_GOTO_FIRST_NODE">
            <summary>WinTrace.GotoFirstNode()  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_GOTO_LAST_NODE">
            <summary>WinTrace.GotoLastNode()  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_FIND_NEXT">
            <summary>WinTrace.FindNext(forward)  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_GOTO_BOOKMARK">
            <summary>WinTrace.GotoBookmark(pos)  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CLEAR_BOOKMARK">
            <summary>WinTrace.ClearBookmark()  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CLEAR_FILTER">
            <summary>WinTrace.ClearFilter()  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ADD_FILTER">
            <summary>WinTrace.AddFilter(column,compare,text)  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_APPLY_FILTER">
            <summary>WinTrace.ApplyFilter(ConditionAnd, ShowMatch,IncludeChildren)  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_TREE_COLUMNWIDTH">
            <summary>Columns widths</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_TREE_MULTI_COLUMN">
            <summary>change the tree to display multiple column</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_TREE_COLUMNTITLE">
            <summary>change the columns titles</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_DISPLAY_TREE">
            <summary>display tree windows</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_TREE_NAME">
            <summary>new name of the tree</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_USE_TREE">
            <summary>the tree to use for other command</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CLEAR_ALL">
            <summary>The command to clear all nodes on the viewer</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CLOSE_WIN">
            <summary>Close the window (wintrace or winwatch)</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_WINWATCH_NAME">
            <summary>Watch Window name</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_WINWATCH_ID">
            <summary>Watch Window ID</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_WATCH_NAME">
            <summary>watch name</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_SAVETOTEXT">
            <summary>Save to text file</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_SAVETOXML">
            <summary>Save to XML file</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_LOADXML">
            <summary>Load XML file</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_LOGFILE">
            <summary>set the log file</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_LINKTOPLUGIN">
            <summary>link a wintrace to a plugin</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CREATE_RESOURCE">
            <summary>create a resource on a wintrace</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_SET_TEXT_RESOURCE">
            <summary>set the text resource</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_DISABLE_RESOURCE">
            <summary>disable a resource </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_FIND_TEXT">
            <summary>TTrace.Find (text, bool Sensitive, bool WholeWord , bool highlight )</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_SHOW">
            <summary>The command to bring the trace tool to front</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CLOSE_VIEWER">
            <summary>Close the viewer (shutdown)</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_TRACE_ID">
            <summary>the unique ID (from the server point of view) of the node (preferably a GUID)</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ICO_INDEX">
            <summary>the index of the Icon to use (CST_ICO_INFO, CST_ICO_WARNING,...)</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_GOTO_NEXTSIBLING">
            <summary>ITraceNode.GotoNextSibling ()  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_GOTO_PREVSIBLING">
            <summary>ITraceNode.GotoPrevSibling ()  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_GOTO_FIRST_CHILD">
            <summary>ITraceNode.GotoFirstChild  ()  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_GOTO_LAST_CHILD">
            <summary>ITraceNode.GotoLastChild   ()  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_SET_BOOKMARK">
            <summary>ITraceNode.SetBookmark (bool enabled)  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_VISIBLE_NODE">
            <summary>ITraceNode.SetVisible  (visible)  </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CLEAR_NODE">
            <summary>Delete the node on the viewer</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CLEAR_SUBNODES">
            <summary>Delete children node on the viewer</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_THREAD_ID">
            <summary>The Thread ID of the sender thread (optional).Used when tracing multiple thread (active by default)</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_PROCESS_NAME">
            <summary>The process name (optional).Used when tracing multiple process </summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_MESSAGE_TIME">
            <summary>The time of trace</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_THREAD_NAME">
            <summary>Thread name (Java or user defined)</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_IP">
            <summary>Client Ip address</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_NEW_NODE">
            <summary>Command to create a new trace node</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_LEFT_MSG">
            <summary>The left message ("traces column")</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_RIGHT_MSG">
            <summary>the right message ("Comment column")</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_SELECT_NODE">
            <summary>set the node as 'Selected' by the user</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_USE_NODE">
            <summary>use an existing node</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_APPEND_LEFT_MSG">
            <summary>The left message to append to "traces column"</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_APPEND_RIGHT_MSG">
            <summary>The right message to append to "Comment column"</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_FOCUS_NODE">
            <summary>Focus to the node</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_FONT_DETAIL">
            <summary>Font detail : ColId Bold Italic Color(BGR) size  Fontname</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_BACKGROUND_COLOR">
            <summary>Background color</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_CREATE_MEMBER">
            <summary>Command to create a member for the current trace node</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_MEMBER_FONT_DETAIL">
            <summary>Member Font detail : ColId Bold Italic Color(BGR) size  Fontname</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_MEMBER_COL2">
            <summary>The text of the second member column</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_MEMBER_VIEWER_KIND">
            <summary>Viewer kind id</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_MEMBER_COL3">
            <summary>The text of the third member column</summary>
        </member>
        <member name="F:TraceTool.TraceConst.CST_ADD_MEMBER">
            <summary>Add the member. Close the previous CST_CREATE_MEMBER </summary>
        </member>
        <member name="T:TraceTool.COPYDATASTRUCT">
            <summary>
            The windows structure to send data to another process
            </summary>
        </member>
        <member name="F:TraceTool.COPYDATASTRUCT.dwData">
            <summary>
            The identifier of the message (checked at destination)
            </summary>
        </member>
        <member name="F:TraceTool.COPYDATASTRUCT.cbData">
            <summary>
            The number of byte to send
            </summary>
        </member>
        <member name="F:TraceTool.COPYDATASTRUCT.lpData">
            <summary>
            The message to send
            </summary>
        </member>
        <member name="T:TraceTool.Helper">
            <summary>
            Define all windows functions used by the TraceTool namespace
            </summary>
        </member>
        <member name="M:TraceTool.Helper.SendMessage(System.Int32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            The windows function that send a message to a windows handle
            </summary>
        </member>
        <member name="M:TraceTool.Helper.PostMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            The windows function that send a message to a windows handle
            </summary>
        </member>
        <member name="M:TraceTool.Helper.FindWindow(System.String,System.String)">
            <summary>
            The windows function that search a windows
            </summary>
        </member>
        <member name="M:TraceTool.Helper.GetCurrentThreadId">
            <summary>
            Return the current thread id (Win Ce / win 32)
            </summary>
        </member>
        <member name="M:TraceTool.Helper.GetCurrentProcessName">
            <summary>
            Return the current process name with path (Win Ce / win 32) without extension
            </summary>
        </member>
        <member name="M:TraceTool.Helper.NewGuid">
            <summary>
            Return a new System.Guid object.
            </summary>
        </member>
        <member name="M:TraceTool.Helper.ARGB_to_BGR(System.Int32)">
            <summary>
            convert a ARGB color (dotnet) to a BGR color (windows)
            </summary>
        </member>
        <member name="M:TraceTool.Helper.HtmlEncode(System.String,System.Text.StringBuilder)">
            <summary>
            Html encode. To reduce dependencies, the HttpUtility.HtmlEncode is reproduce here, with StringBuilder as target (faster)
            </summary>
        </member>
        <member name="M:TraceTool.Helper.AddCommand(System.Collections.Generic.List{System.String},System.Int32)">
            code only
        </member>
        <member name="M:TraceTool.Helper.AddCommand(System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            code + int
        </member>
        <member name="M:TraceTool.Helper.AddCommand(System.Collections.Generic.List{System.String},System.Int32,System.Boolean)">
            code + bool
        </member>
        <member name="M:TraceTool.Helper.AddCommand(System.Collections.Generic.List{System.String},System.Int32,System.String)">
            code + string
        </member>
        <member name="M:TraceTool.Helper.AddCommand(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.String)">
            code + int + string
        </member>
        <member name="M:TraceTool.Helper.AddCommand(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Int32,System.String)">
            code + int + int + string
        </member>
        <member name="M:TraceTool.Helper.AddCommand(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            code + int + int + int + string
        </member>
        <member name="T:TraceTool.TMemberNode">
            <summary>
            TMemberNode represent a node inside the right object tree
            </summary>
        </member>
        <member name="F:TraceTool.TMemberNode.Col1">
            <summary>
            The 3 columns to display
            </summary>
        </member>
        <member name="F:TraceTool.TMemberNode.Col2">
            <summary>
            The 3 columns to display
            </summary>
        </member>
        <member name="F:TraceTool.TMemberNode.Col3">
            <summary>
            The 3 columns to display
            </summary>
        </member>
        <member name="F:TraceTool.TMemberNode.DefaultCol2">
            <summary>
            The 3 columns to display
            </summary>
        </member>
        <member name="F:TraceTool.TMemberNode.Members">
            <summary>
            an array of sub members (TMemberNode)
            </summary>
        </member>
        <member name="F:TraceTool.TMemberNode.ViewerKind">
            <summary>
             Viewer kind. determine how the node will display members
            </summary>
        </member>
        <member name="F:TraceTool.TMemberNode.Tag">
            <summary>
             User defined tag, NOT SEND to the viewer
            </summary>
        </member>
        <member name="M:TraceTool.TMemberNode.#ctor">
            <summary>
            Create a TMemberNode with no text in the 3 columns
            </summary>
        </member>
        <member name="M:TraceTool.TMemberNode.#ctor(System.String)">
            <summary>
            Create a TMemberNode with a text for the first column
            </summary>
            <param name="col1">text of col1</param>
        </member>
        <member name="M:TraceTool.TMemberNode.#ctor(System.String,System.String)">
            <summary>
            Create a TMemberNode with text for the first 2 columns
            </summary>
            <param name="col1">text of col1</param>
            <param name="col2">text of col2</param>
        </member>
        <member name="M:TraceTool.TMemberNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a TMemberNode with text for the 3 columns
            </summary>
            <param name="col1">text of col1</param>
            <param name="col2">text of col2</param>
            <param name="col3">text of col3</param>
        </member>
        <member name="M:TraceTool.TMemberNode.Add(TraceTool.TMemberNode)">
            <summary>
            Add a member to the members list
            </summary>
            <param name="member"></param>
            <returns>The TMember node to add</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.Add(System.String)">
            <summary>
            Create a TMemberNode with a text for the first column
            </summary>
            <param name="col1">text of first col</param>
            <returns>The TMember node to add</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.Add(System.String,System.String)">
            <summary>
            Create a TMemberNode with text for the first 2 columns
            </summary>
            <param name="col1">text of first col</param>
            <param name="col2">text of second col</param>
            <returns>The TMember node to add</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.Add(System.String,System.String,System.String)">
            <summary>
            Create a TMemberNode with text for the 3 columns
            </summary>
            <param name="col1">text of first col</param>
            <param name="col2">text of second col</param>
            <param name="col3">text of third col</param>
            <returns>The TMember node to add</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.SetFontDetail(System.Int32,System.Boolean)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Col1=0, Col2=1, Col3=2</param>
            <param name="bold">Change font to bold</param>
            <returns>The TMember node</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.SetFontDetail(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Col1=0, Col2=1, Col3=2</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to Italic</param>
            <returns>The TMember node</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.SetFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Col1=0, Col2=1, Col3=2</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to Italic</param>
            <param name="color">Change Color. To reduce the number assembly reference, the Color structure is not used. Use YourColor.ToArgb() instead. </param>
            <returns>The TMember node</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.SetFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Col1=0, Col2=1, Col3=2</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to Italic</param>
            <param name="color">Change Color. To reduce the number assembly reference, the Color structure is not used. Use YourColor.ToArgb() instead. Use -1 to keep default color</param>
            <param name="size">Change font size</param>
            <returns>The TMember node</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.SetFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Col1=0, Col2=1, Col3=2</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to Italic</param>
            <param name="color">Change Color. To reduce the number assembly reference, the Color structure is not used. Use YourColor.ToArgb() instead. Use -1 to keep default color</param>
            <param name="size">Change font size, use zero to keep normal size</param>
            <param name="fontName">Change font name</param>
            <returns>The TMember node</returns>
        </member>
        <member name="M:TraceTool.TMemberNode.AddToStringList(System.Collections.Generic.List{System.String})">
            <summary>
            recursively add members to the node CommandList
            </summary>
            <param name="commandList">target command list</param>
        </member>
        <member name="T:TraceTool.ReflectionHelper">
            <summary>
            Helper for reflection. You can use it your project without TraceTool
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.Type2ShortString(System.Type)">
            <summary>
            return the name of the type or element type if reference
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.ArrayBounds(System.Array)">
            <summary>
            return the list of bounds : 1..2, 0..3 , 1..1
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.Type2String(System.Type,System.String@,System.String@)">
            <summary>
            return the modifiers and the name of a type
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.Constructor2String(System.Reflection.ConstructorInfo,System.String@,System.String@)">
            <summary>
            return the modifiers and the name of a constructor (similar to a method)
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.GetFieldModifier(System.Reflection.FieldInfo)">
            <summary>
            return the modifiers of a field
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.Field2String(System.Reflection.FieldInfo,System.String@,System.String@)">
            <summary>
            return the modifiers and the name of a field
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.Property2String(System.Reflection.PropertyInfo,System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            return the modifiers and the name of a property
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.Event2String(System.Reflection.EventInfo,System.String@,System.String@)">
            <summary>
            return the modifiers and the name of an event
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.Method2String(System.Reflection.MethodInfo,System.String@,System.String@)">
            <summary>
            Give the modifiers and the name of a method
            if the method is an operator, the method return true
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.Method2StringModifier(System.Reflection.MethodBase)">
            <summary>
            return the modifier (private,...) of a method (without the method type and name)
            called by Property2String,Constructor2String and Method2String
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.MethodParams2String(System.Reflection.MethodBase)">
            <summary>
            return the parameters name and type of a method
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.MethodParamsType2String(System.Reflection.MethodBase)">
            <summary>
            return the parameters type of a method , useful to retrieve XML documentation for a method
            parenthesis are included only if parameters exists
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.PropertyParamsType2String(System.Reflection.PropertyInfo)">
            <summary>
            return the parameters type of a property , useful to retrieve XML documentation for a property
            parenthesis are included only if parameters exists
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.IsDefaultMember(System.Type,System.Reflection.MemberInfo)">
            <summary>
            indicate if the member is one of the "default" member.
            I don't know how to specify 2 "default", but ...
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.IsArray(System.Type)">
            <summary>
            indicate if the type is an array.
            </summary>
        </member>
        <member name="M:TraceTool.ReflectionHelper.AssemblyDocumentationFileName(System.Type)">
            <summary>
            return the name of the XML assembly documentation file for a type.Empty string if not found
            </summary>
        </member>
        <member name="T:TraceTool.TTraceListener">
            <summary>
            TTraceListener is the trace listener, if you want to use the classic Microsoft Trace class.
            </summary>
        </member>
        <member name="F:TraceTool.TTraceListener.Listener">
            <summary>
            Specify at any time what is top node that receive the traces
            </summary>
        </member>
        <member name="P:TraceTool.TTraceListener.CurrentNode">
            <summary>
            the current node (read only)
            </summary>
        </member>
        <member name="M:TraceTool.TTraceListener.#ctor">
            <summary>
            Create a listener. TTrace.Debug is used to send traces
            </summary>
        </member>
        <member name="M:TraceTool.TTraceListener.#ctor(TraceTool.TraceNode)">
            <summary>
            Create a listener giving a TraceNode as the parent node.
            </summary>
            <param name="traceDoor">Specify Debug,Warning,Error or user TraceNode object</param>
        </member>
        <member name="M:TraceTool.TTraceListener.Write(System.String)">
            <summary>
            Send message to TTrace
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="M:TraceTool.TTraceListener.WriteLine(System.String)">
            <summary>
            Send message to TTrace
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="M:TraceTool.TTraceListener.WriteIndent">
            <summary>
            Force creation of new trace node
            </summary>
        </member>
        <member name="T:TraceTool.TraceNode">
            <summary>
            TraceNode represent node on the viewer.
            </summary>
        </member>
        <member name="M:TraceTool.TraceNode.#ctor(TraceTool.TraceNode,System.Boolean)">
            <summary>
            Constructor. Use TTrace or TraceNodeEx class as entry point
            Create a Node with an unique ID (true)
            You can also recreated an already send node if you still have the id
            </summary>
            <param name="parentNode">The parent node where to place that trace.
            The IconIndex and the enabled properties are also recopied
            Can be null : the root tree become the parent node, enabled is true and the default icon is used
            </param>
            <param name="generateUniqueId">When true, a unique ID (a guid) is generated for the trace.
            </param>
        </member>
        <member name="M:TraceTool.TraceNode.#ctor(TraceTool.TraceToSend)">
            <summary>
            Copy constructor : create a TraceNode copy of a TraceToSend
            </summary>
            <param name="source">TraceNode to copy</param>
        </member>
        <member name="M:TraceTool.TraceNode.#ctor(TraceTool.TraceNodeEx)">
            <summary>
            Copy constructor : create a TraceNode copy of a TraceNodeEx
            </summary>
            <param name="source">TraceNodeEx to copy</param>
        </member>
        <member name="M:TraceTool.TraceNode.Resend(System.String,System.String)">
            <summary>
            Resend the left and right trace message to the viewer
            </summary>
            <param name="newLeftMsg">new left message</param>
            <param name="newRightMsg">new right message</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.ResendLeft(System.String)">
            <summary>
            ReSend left trace to the server
            </summary>
            <param name="newLeftMsg">new left message</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.ResendRight(System.String)">
            <summary>
            ReSend right trace to the server
            </summary>
            <param name="newRightMsg">new right message</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.ResendIconIndex(System.Int32)">
            <summary>
            Change the Icon index
            </summary>
            <param name="index">Index of the icon to use</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetBackgroundColor(System.Int32)">
            <summary>
            Change Background Color (whole line) of a node
            </summary>
            <param name="color">new background color of the node</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetBackgroundColor(System.Int32,System.Int32)">
            <summary>
            Change Background Color (specific column) of a node
            </summary>
            <param name="color">new background color of the node</param>
            <param name="colId">Column index : All columns=-1, Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetFontDetail(System.Int32,System.Boolean)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetFontDetail(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to Italic</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to Italic</param>
            <param name="color">Change Color. To reduce the number assembly reference, the Color structure is not used. Use YourColor.ToArgb() instead. </param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to Italic</param>
            <param name="color">Change Color. To reduce the number assembly reference, the Color structure is not used. Use YourColor.ToArgb() instead. Use -1 to keep default color</param>
            <param name="size">Change font size</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns=-1, Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to Italic</param>
            <param name="color">Change Color. To reduce the number assembly reference, the Color structure is not used. Use YourColor.ToArgb() instead. Use -1 to keep default color</param>
            <param name="size">Change font size, use zero to keep normal size</param>
            <param name="fontName">Change font name</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.Append(System.String,System.String)">
            <summary>
            append right and left texts to an existing node
            </summary>
            <param name="leftMsgToAdd">left message</param>
            <param name="rightMsgToAdd">right message</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.AppendLeft(System.String)">
            <summary>
            append left text to an existing node
            </summary>
            <param name="leftMsgToAdd">left message</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.AppendRight(System.String)">
            <summary>
            append right text to an existing node
            </summary>
            <param name="rightMsgToAdd">right message</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.AppendStack">
            <summary>
            append right text to an existing node
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.Show">
            <summary>
            Show the node in the tree (not means selected, just visible in the tree)
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetSelected">
            <summary>
            Select the node in the viewer
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.Delete">
            <summary>
            Delete the node
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.DeleteChildren">
            <summary>
            Delete children node
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetBookmark(System.Boolean)">
            <summary>
            Set or reset the bookmark for the node
            </summary>
            <param name="bookmarked">true/false</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.SetVisible(System.Boolean)">
            <summary>
            set a node visible or invisible
            </summary>
            <param name="visible">true/false</param>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.GotoNextSibling">
            <summary>
            Set focus to next sibling
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.GotoPrevSibling">
            <summary>
            Set focus to previous sibling
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.GotoFirstChild">
            <summary>
            Set focus to first child
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="M:TraceTool.TraceNode.GotoLastChild">
            <summary>
            Set focus to last child
            </summary>
            <returns>The trace node</returns>
        </member>
        <member name="T:TraceTool.TraceNodeBase">
            <summary>
            base class for TraceToSend (TraceNode, Wintrace) and traceNodeEx
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeBase.Id">
            <summary>
            The unique ID. Normally it's a GUID, but can be replaced by something else for inter process traces.
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeBase.Enabled">
            <summary>
            When Enabled is false, all traces are disabled. Default is true.
            All node have a Enabled property, that lets you define group of Enabled trace.
            For example set the TTrace.Debug.enabled to false but continue to accept Error and Warning traces
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeBase.WinTraceId">
            <summary>
            The window where trace is send.
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeBase.Tag">
            <summary>
            User variable, provided for the convenience of developers
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeBase.IconIndex">
            <summary>
            The index of the icon to use. You can then show an icon for Warning traces different for Error traces
            </summary>
        </member>
        <member name="M:TraceTool.TraceNodeBase.ToString">
            <summary>
            return the node id
            </summary>
            <returns>node id</returns>
        </member>
        <member name="T:TraceTool.TraceNodeEx">
            <summary> Alternate way to send traces : prepare a TraceNode with all properties then send it.
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeEx.ParentNodeId">
            <summary>
            The Id of the parent node
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeEx.LeftMsg">
            <summary>
            The left part of the tree message
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeEx.RightMsg">
            <summary>
            The right part of the tree message
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeEx.Time">
            <summary>
            time
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeEx.ThreadName">
            <summary>
            thread name
            </summary>
        </member>
        <member name="F:TraceTool.TraceNodeEx.Members">
            <summary>
            the root for the Member tree
            </summary>
        </member>
        <member name="M:TraceTool.TraceNodeEx.#ctor">
            <summary>
            create a Node with an unique ID
            </summary>
        </member>
        <member name="M:TraceTool.TraceNodeEx.#ctor(TraceTool.TraceToSend)">
            <summary>
            create a Node with an unique ID (true)
            </summary>
            <param name="parentNode">The parent node where to place that trace.
            The IconIndex and the enabled properties are also recopied
            Can be null : the root tree become the parent node, enabled is true and the default icon is used
            </param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.#ctor(TraceTool.TraceToSend,System.Boolean)">
            <summary>
            Create a Node.
            </summary>
            <param name="parentNode">The parent node where to place that trace.
            The IconIndex and the enabled properties are also recopied
            Can be null : the root tree become the parent node, enabled is true and the default icon is used
            </param>
            <param name="generateUniqueId">if true, the id is generated automatically, else set the empty string
            </param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddObject(System.Object)">
            <summary>
            Call AddObject to fill the "member" tree with the object description
            </summary>
            <param name="objToSend"></param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddObject(System.Object,TraceTool.TraceDisplayFlags)">
            <summary>
            Call AddObject to fill the "member" tree with the object description
            </summary>
            <param name="objToSend">Object to send</param>
            <param name="flags">determine what information to send</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddType(System.Type)">
            <summary>
            Call AddType to fill the "member" tree with the object type
            </summary>
            <param name="typeToSend">Object type to send</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddType(System.Type,TraceTool.TraceDisplayFlags)">
            <summary>
            Call AddType to fill the "member" tree with the object type
            </summary>
            <param name="typeToSend">Object type to send</param>
            <param name="flags">determine what information to send</param>
        </member>
        <member name="F:TraceTool.TraceNodeEx.SendObjectRecursiveStatus">
            <summary>
            SendObjectRecursiveStatus is used to block recursive call to AddTypeObject
            since AddTypeObject will try to evaluate field GET method.
            If the GET method call AddObject or similar function,
            we have a possible recursive call (with stack overflow).
            </summary>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddTypeObject(System.Object,System.Type,TraceTool.TraceDisplayFlags)">
            fill the Members member with a type description and optional values of that type
            caller : AddType, AddObject
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddDocumentation(System.Object,TraceTool.TMemberNode,System.Type,System.Reflection.MemberInfo)">
             <summary>
             add documentation for a type or a member
             </summary>
            
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayCustomAttribute(TraceTool.TMemberNode,System.Attribute[])">
            add the attributes stored in the given parameter to the sub members
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddValue(System.Object)">
            <summary>
            Call AddValue to fill the "member" tree with the object value.
            </summary>
            <param name="objToSend">Object to display</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddValue(System.Object,System.Boolean)">
            <summary>
            Call AddValue to fill the "member" tree with the object value.
            </summary>
            <param name="objToSend">Object to display</param>
            <param name="sendPrivate">Display private fields</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddValue(System.Object,System.Boolean,System.Int32)">
            <summary>
            Call AddValue to fill the "member" tree with the object value.
            </summary>
            <param name="objToSend">Object to display</param>
            <param name="sendPrivate">Display private fields</param>
            <param name="maxLevel">Number of sub component to display in tree</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddValue(System.Object,System.Boolean,System.Int32,System.String)">
            <summary>
            Call AddValue to fill the "member" tree with the object value.
            </summary>
            <param name="objToSend">Object to display</param>
            <param name="sendPrivate">Display private fields</param>
            <param name="maxLevel">Number of sub component to display in tree</param>
            <param name="objTitle">Title to display for the object</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddAllFieldsValue(System.Object,System.Type,TraceTool.TMemberNode,System.Boolean,System.Int32,TraceTool.ParsedObjectList)">
            Display all fields (with corresponding value) of the type
            Called by AddValue(), not by AddObject()
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddProperties(System.Object,System.Type,TraceTool.TMemberNode,System.Boolean,System.Int32,TraceTool.ParsedObjectList,System.Collections.Generic.Dictionary{System.String,TraceTool.TMemberNode})">
            Display all properties (with corresponding value, if any) of the type
            Called by AddValue(), not by AddObject()
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayBases(System.Type)">
            show the type with its interfaces, and base classes.
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayNestedTypes(System.Type)">
            show nested type names (not the content)
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayFields(System.Object,System.Type,System.Object,TraceTool.TraceDisplayFlags)">
            Display all fields (with corresponding value) of the type
            Called by AddObject(), not by AddValue()
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayDependencyProperties(System.Object)">
            caller : AddTypeObject (caller : AddType, AddObject)
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayProperties(System.Object,System.Type,System.Object,TraceTool.TraceDisplayFlags)">
            Display all properties (with corresponding value, if any) of the type
            Called by AddObject(), not by AddValue()
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayConstructors(System.Type,System.Object,TraceTool.TraceDisplayFlags)">
            display all Constructors of a type
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayMethods(System.Type,System.Object,TraceTool.TraceDisplayFlags)">
            display all Methods of a type
            Note that Operators are method but will be displayed in a separate group
        </member>
        <member name="M:TraceTool.TraceNodeEx.DisplayEvents(System.Type,System.Object,TraceTool.TraceDisplayFlags)">
            display all Events of a type
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddStackTrace">
            <summary>
            Add the stack frame to the Members.
            </summary>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddStackTrace(System.Int32)">
            <summary>
            Add the stack frame to the Members.
            </summary>
            <param name="level">start level (default 1)</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddCaller">
            <summary>
            Add the caller frame to the Members. Level 0 is self
            </summary>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddCaller(System.Int32)">
            <summary>
            Add the caller stack information. It's like the call stack, but display only 1 line
            </summary>
            <param name="level">Level 0 is self</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddDump(System.String,System.Byte[],System.Int32)">
            <summary>
            Add byte dump to the Members
            </summary>
            <param name="shortTitle">Title to display in the first col</param>
            <param name="bytes">Pointer to the buffer to dump</param>
            <param name="count">Number of bytes to dump</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddDump(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add byte dump to the Members
            </summary>
            <param name="shortTitle">Title to display in the first col</param>
            <param name="bytes">Pointer to the buffer to dump</param>
            <param name="index">start offset</param>
            <param name="count">Number of byte to dump</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddXML(System.String)">
            <summary>
            Add xml text
            </summary>
            <param name="xml">xml text to send</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddTable(TraceTool.TraceTable)">
            <summary>
            Add table to node
            </summary>
            <param name="table">table to send</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddTable(System.Object)">
            <summary>
            Add table to node
            </summary>
            <param name="list">Object table to send. Must be an Array or IEnumerable or IDictionary</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddBackgroundColor(System.Int32)">
            <summary>
            Change background font color
            </summary>
            <param name="color">RGB background color (see Color.ToArgb function)</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddBackgroundColor(System.Int32,System.Int32)">
            <summary>
            Change background font color
            </summary>
            <param name="color">RGB background color (see Color.ToArgb function)</param>
            <param name="colId">Column index : All columns= -1,Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddFontDetail(System.Int32,System.Boolean)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns= -1,Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <returns>The TraceNodeEx</returns>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddFontDetail(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns= -1,Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to italic</param>
            <returns>The TraceNodeEx</returns>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns= -1,Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to italic</param>
            <param name="color">RGB color (see Color.ToArgb function). Use -1 to keep default color</param>
            <returns>The TraceNodeEx</returns>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns= -1,Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to italic</param>
            <param name="color">RGB color (see Color.ToArgb function). Use -1 to keep default color</param>
            <param name="size">Change font size, use zero to keep normal size</param>
            <returns>The TraceNodeEx</returns>
        </member>
        <member name="M:TraceTool.TraceNodeEx.AddFontDetail(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Change font detail for an item in the trace
            </summary>
            <param name="colId">Column index : All columns= -1,Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <param name="bold">Change font to bold</param>
            <param name="italic">Change font to italic</param>
            <param name="color">RGB color (see Color.ToArgb function). Use -1 to keep default color</param>
            <param name="size">Change font size, use zero to keep normal size</param>
            <param name="fontName">Change font name</param>
            <returns>The TraceNodeEx</returns>
        </member>
        <member name="M:TraceTool.TraceNodeEx.Send">
            <summary>
            Send the trace to the server (left + right + members)
            </summary>
            <returns>a TraceNode for furthers changes</returns>
        </member>
        <member name="M:TraceTool.TraceNodeEx.Resend">
            <summary>
            Resend the trace to the server (only left and right message)
            </summary>
        </member>
        <member name="T:TraceTool.TraceTable">
            <summary>
            TraceTable class : construct a table of row to display in the viewer on a node.
            The table must be associated with a node. see TraceNodeEx.AddTable() and TraceToSend.SendTable()
            </summary>
        </member>
        <member name="M:TraceTool.TraceTable.#ctor">
            <summary>
            create a table
            </summary>
        </member>
        <member name="M:TraceTool.TraceTable.AddColumnTitle(System.String)">
            <summary>
            Add columns title : one or more columns titles separated by tabs
            </summary>
            <param name="colTitle">one or more columns titles separated by tabs. Can also be called several times to add titles</param>
        </member>
        <member name="M:TraceTool.TraceTable.AddRow">
            <summary>
            Add an empty row
            </summary>
        </member>
        <member name="M:TraceTool.TraceTable.AddRowData(System.String)">
            <summary>
            Add data to current row
            </summary>
            <param name="cell">one or more columns data separated by tabs. Can also be called several times to add cells</param>
        </member>
        <member name="M:TraceTool.TraceTable.CopyToNodeMembers(TraceTool.TMemberNode)">
            <summary>
            convert to members
            </summary>
            <param name="nodeMembers">target</param>
        </member>
        <member name="T:TraceTool.TraceToSend">
            TraceToSend methods create new traces and send it to the viewer
            Common base class for TraceNode and WinTrace
            TTrace.warning, debug and error are TraceNode
        </member>
        <member name="M:TraceTool.TraceToSend.Send(System.String)">
            <summary>
            The most useful function to send trace
            <example> This sample shows how to send a sample trace.
            <code>
            TTrace.Debug.Send ("Hello world") ;
            </code>
            <code>
            TraceNode FirstNode ;
            FirstNode = TTrace.Debug.Send ("Hello") ;
            FirstNode.Send ("World") ;   // add a second node under the first one
            </code>
            </example>
            </summary>
            <param name="leftMsg">The message to display in the 'traces' column</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.Send(System.String,System.String)">
            <summary>
            Send a trace specifying the text for 2 columns
            <example> This sample shows how to send a sample trace.
            <code>
            TTrace.Debug.Send ("Hello", "world") ;  // 2 columns trace
            </code>
            </example>
            </summary>
            <param name="leftMsg">The message in the "traces" column</param>
            <param name="rightMsg">The message in the "Comment" column</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendObject(System.String,System.Object)">
            <summary>
            Send a 'reflected' representation of the given object
            </summary>
            <param name="leftMsg">the message to display</param>
            <param name="objToSend">The object to inspect</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendObject(System.String,System.Object,TraceTool.TraceDisplayFlags)">
            <summary>
            Send a 'reflected' representation of the given object
            </summary>
            <param name="leftMsg">the message to display</param>
            <param name="objToSend">The object to inspect</param>
            <param name="flags">what information to display</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendValue(System.String,System.Object)">
            <summary>
            Send the Value of the given object (useful for base type, variant and array)
            properties and array content are also inspected with a maximum
            </summary>
            <param name="leftMsg">the message to display</param>
            <param name="objToSend">The object to show</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendValue(System.String,System.Object,System.Boolean)">
            <summary>
            Send the Value of the given object (useful for base type, variant and array)
            </summary>
            <param name="leftMsg">the message to display</param>
            <param name="objToSend">The object to show</param>
            <param name="sendPrivate">Send Private fields (default is false)</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendValue(System.String,System.Object,System.Boolean,System.Int32)">
            <summary>
            Send the Value of the given object (useful for base type, variant and array)
            </summary>
            <param name="leftMsg">the message to display</param>
            <param name="objToSend">The object to show</param>
            <param name="sendPrivate">Send Private fields (default is false)</param>
            <param name="maxLevel">Max level to inspect (default is 3)</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendValue(System.String,System.Object,System.Boolean,System.Int32,System.String)">
            <summary>
            Send the Value of the given object (useful for base type, variant and array)
            </summary>
            <param name="leftMsg">the message to display</param>
            <param name="objToSend">The object to show</param>
            <param name="sendPrivate">Send Private fields (default is false)</param>
            <param name="maxLevel">Max level to inspect (default is 3)</param>
            <param name="objTitle">Title of the object</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendType(System.String,System.Type)">
            <summary>
            Send a 'reflected' representation of the given type
            </summary>
            <param name="leftMsg">The message to display</param>
            <param name="oType">The type to inspect</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendType(System.String,System.Type,TraceTool.TraceDisplayFlags)">
            <summary>
            Send a 'reflected' representation of the given type
            </summary>
            <param name="leftMsg">The message to display</param>
            <param name="oType">The type to inspect</param>
            <param name="flags">flags to limit information to send</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendStack(System.String)">
            <summary>
            Send the stack frames.
            </summary>
            <param name="leftMsg">Trace message</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendStack(System.String,System.Int32)">
            <summary>
            Send the stack frames.
            </summary>
            <param name="leftMsg">Trace message</param>
            <param name="level">Number of call to skip</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendCaller(System.String,System.Int32)">
            <summary>
            Send the caller frame.
            </summary>
            <param name="leftMsg">Trace message</param>
            <param name="level">Level 0 is self</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendDump(System.String,System.String,System.Byte[],System.Int32)">
            <summary>
            Send byte dump.
            </summary>
            <param name="leftMsg">Trace message</param>
            <param name="shortTitle">Title to display in the first col</param>
            <param name="adr">Pointer to the buffer to dump</param>
            <param name="count">Number of byte to dump</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendBackgroundColor(System.String,System.Int32)">
            <summary>
            send trace with a specific background color
            </summary>
            <param name="leftMsg">Trace message</param>
            <param name="color">RGB background color (see Color.ToArgb function)</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendBackgroundColor(System.String,System.Int32,System.Int32)">
            <summary>
            send trace with a specific background color
            </summary>
            <param name="leftMsg">Trace message</param>
            <param name="color">RGB background color (see Color.ToArgb function)</param>
            <param name="colId">Column index : All columns= -1,Icon=0, Time=1, thread=2, left msg=3, right msg =4 or user defined column</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendXml(System.String,System.String)">
            <summary>
            Send xml text
            </summary>
            <param name="leftMsg">Trace message</param>
            <param name="xml">xml text to send</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendTable(System.String,TraceTool.TraceTable)">
            <summary>
            Add table to node
            </summary>
            <param name="leftMsg">Trace message</param>
            <param name="table">table to send</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.SendTable(System.String,System.Object)">
            <summary>
            Add table to node
            </summary>
            <param name="leftMsg">Trace message</param>
            <param name="table">Object table to send. Must be an Array or IEnumerable or IDictionary</param>
            <returns>the new node</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.PrepareNewNode(System.String,System.String)">
            Prepare the commandList. Common to all SendXXX function
        </member>
        <member name="M:TraceTool.TraceToSend.GetLastContext">
            Get the last context.
            @return last context for the thread
        </member>
        <member name="M:TraceTool.TraceToSend.GetLastContextId">
            Get the last context ID.
            @return last context ID for the thread
        </member>
        <member name="M:TraceTool.TraceToSend.PushContext(TraceTool.NodeContext)">
            Save the context
            @param newContext the context to push
        </member>
        <member name="M:TraceTool.TraceToSend.DeleteLastContext">
            Delete the last context for the thread
        </member>
        <member name="P:TraceTool.TraceToSend.IndentLevel">
            <summary>
            return current indent level. See Indent()
            </summary>
            <returns>current indent level</returns>
        </member>
        <member name="M:TraceTool.TraceToSend.Indent(System.String)">
            <summary>
            Send a message. further trace to the same node are indented under this one.
            </summary>
            <param name="leftMsg">Left message to send</param>
        </member>
        <member name="M:TraceTool.TraceToSend.Indent(System.String,System.String)">
            <summary>
            Send a message. further trace to the same node are indented under this one.
            </summary>
            <param name="leftMsg">Left message to send</param>
            <param name="rightMsg">Right message to send</param>
        </member>
        <member name="M:TraceTool.TraceToSend.Indent(System.String,System.String,System.Int32)">
            <summary>
            Send a message. further trace to the same node are indented under this one.
            </summary>
            <param name="leftMsg">Left message to send</param>
            <param name="rightMsg">Right message to send</param>
            <param name="backGroundColor">RGB BackGround Color (see Color.ToArgb function)</param>
        </member>
        <member name="M:TraceTool.TraceToSend.Indent(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Send a message. further trace to the same node are indented under this one.
            </summary>
            <param name="leftMsg">Left message to send</param>
            <param name="rightMsg">Right message to send</param>
            <param name="backGroundColor">BackGround Color</param>
            <param name="isEnter">if true , a special "enter" icon is added on the node</param>
        </member>
        <member name="M:TraceTool.TraceToSend.UnIndent">
            <summary>
            Delete indentation to the node added by indent()
            </summary>
        </member>
        <member name="M:TraceTool.TraceToSend.UnIndent(System.String)">
            <summary>
            Delete indentation to the node added by indent()
            </summary>
            <param name="leftMsg">Message to send to close indentation (optional)</param>
        </member>
        <member name="M:TraceTool.TraceToSend.UnIndent(System.String,System.String)">
            <summary>
            Delete indentation to the node added by indent()
            </summary>
            <param name="leftMsg">Message to send to close indentation (optional)</param>
            <param name="rightMsg">Message to send to close indentation (optional)</param>
        </member>
        <member name="M:TraceTool.TraceToSend.UnIndent(System.String,System.String,System.Int32)">
            <summary>
            Delete indentation to the node added by indent()
            </summary>
            <param name="leftMsg">Message to send to close indentation (optional)</param>
            <param name="rightMsg">Message to send to close indentation (optional)</param>
            <param name="backGroundColor">RGB background color (optional)(see Color.ToArgb function)</param>
        </member>
        <member name="M:TraceTool.TraceToSend.UnIndent(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Delete indentation to the node added by indent()
            </summary>
            <param name="leftMsg">Message to send to close indentation (optional)</param>
            <param name="rightMsg">Message to send to close indentation (optional)</param>
            <param name="backGroundColor">RGB background color (optional)(see Color.ToArgb function)</param>
            <param name="isExit">if true, viewer type 'exit' is used</param>
        </member>
        <member name="M:TraceTool.TraceToSend.EnterMethod(System.String)">
            <summary>
            Indent with "Enter " + left message + right message (optional) + background color (optional)
            </summary>
            <param name="leftMsg">Left message to send</param>
        </member>
        <member name="M:TraceTool.TraceToSend.EnterMethod(System.String,System.String)">
            <summary>
            Indent with "Enter " + left message + right message (optional) + background color (optional)
            </summary>
            <param name="leftMsg">Left message to send</param>
            <param name="rightMsg">Right message to send</param>
        </member>
        <member name="M:TraceTool.TraceToSend.EnterMethod(System.String,System.String,System.Int32)">
            <summary>
            Indent with "Enter " + left message + right message (optional) + background color (optional)
            </summary>
            <param name="leftMsg">Left message to send</param>
            <param name="rightMsg">Right message to send</param>
            <param name="backGroundColor">RGB BackGround Color(see Color.ToArgb function)</param>
        </member>
        <member name="M:TraceTool.TraceToSend.ExitMethod">
            <summary>
            UnIndent with "Exit " + left message (optional) + right message (optional) + background color (optional)
            </summary>
        </member>
        <member name="M:TraceTool.TraceToSend.ExitMethod(System.String)">
            <summary>
            UnIndent with "Exit " + left message (optional) + right message (optional) + background color (optional)
            </summary>
            <param name="leftMsg">Left message to send</param>
        </member>
        <member name="M:TraceTool.TraceToSend.ExitMethod(System.String,System.String)">
            <summary>
            UnIndent with "Exit " + left message (optional) + right message (optional) + background color (optional)
            </summary>
            <param name="leftMsg">Left message to send</param>
            <param name="rightMsg">Right message to send</param>
        </member>
        <member name="M:TraceTool.TraceToSend.ExitMethod(System.String,System.String,System.Int32)">
            <summary>
            UnIndent with "Exit " + left message (optional) + right message (optional) + background color (optional)
            </summary>
            <param name="leftMsg">Left message to send</param>
            <param name="rightMsg">Right message to send</param>
            <param name="backGroundColor">RGB BackGround Color(see Color.ToArgb function)</param>
        </member>
        <member name="T:TraceTool.TTrace">
            <summary>
            TTrace is the entry point for all traces.
            TTrace give 3 'TraceNode' doors : Warning , Error and Debug.
            Theses 3 doors are displayed with a special icon (all of them have the 'enabled' property set to true.
            That class is fully static.
            </summary>
        </member>
        <member name="F:TraceTool.TTrace.NbDiscarded">
            number of message discarded (socket error)
        </member>
        <member name="F:TraceTool.TTrace.NbSend">
            number of message send 
        </member>
        <member name="F:TraceTool.TTrace.Options">
            TTrace Options (socket, show functions, ...)
        </member>
        <member name="M:TraceTool.TTrace.InitError">
            <summary>
            return initialization error
            </summary>
        </member>
        <member name="M:TraceTool.TTrace.Stop">
            <summary>
            Stop sub-system (worker thread) before leaving your program. You may call TTrace.Flush() before Stop()
            </summary>
        </member>
        <member name="M:TraceTool.TTrace.Show(System.Boolean)">
            <summary>
            Show or hide the trace program
            </summary>
            <param name="isVisible">When True : Show. When False : Hide</param>
        </member>
        <member name="M:TraceTool.TTrace.Find(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the global search criteria. You must call TTrace.Wintrace.FindNext to position to the next or previous matching node
            </summary>
            <param name="text">Text to search</param>
            <param name="sensitive">Search is case sensitive</param>
            <param name="wholeWord">match only whole word</param>
            <param name="highlight">Highlight results</param>
            <param name="searchInAllPages">call to FindNext will search also in other traces windows if true</param>
        </member>
        <member name="M:TraceTool.TTrace.ClearAll">
            <summary>
            Clear all traces
            </summary>
        </member>
        <member name="M:TraceTool.TTrace.CloseViewer">
            <summary>
            Close the viewer
            </summary>
        </member>
        <member name="M:TraceTool.TTrace.CloseSocket">
            <summary>
            Close the socket
            Tips : Socket is automatically closed when destroyed. No need to create destructor
            </summary>
        </member>
        <member name="P:TraceTool.TTrace.LastSocketError">
            <summary>
            The last socket error
            </summary>
        </member>
        <member name="P:TraceTool.TTrace.WinTrace">
            <summary>
            The windows where is stored the main tree (read only)
            </summary>
        </member>
        <member name="P:TraceTool.TTrace.Watches">
            <summary>
            The main watches window
            </summary>
        </member>
        <member name="P:TraceTool.TTrace.Warning">
            <summary>
            Shortcut to WinTrace.Warning
            </summary>
        </member>
        <member name="P:TraceTool.TTrace.Error">
            <summary>
            Shortcut to WinTrace.Error
            </summary>
        </member>
        <member name="P:TraceTool.TTrace.Debug">
            <summary>
            Shortcut to WinTrace.Debug
            </summary>
        </member>
        <member name="P:TraceTool.TTrace.Out">
            <summary>
            TextWriter output. For Linq to SQL for example : NORTHWNDDataContext.Log = TTrace.Out 
            </summary>
        </member>
        <member name="M:TraceTool.TTrace.FlushAsync">
            flush remaining traces to the viewer
        </member>
        <member name="M:TraceTool.TTrace.Flush">
            flush remaining traces to the viewer
        </member>
        <member name="F:TraceTool.TTrace.LastTimeToTheSecond">
            Last stored time with precision up to the second.
        </member>
        <member name="F:TraceTool.TTrace.LastTime">
            Last stored time with precision up to the second, formatted as a string.
        </member>
        <member name="M:TraceTool.TTrace.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Renders the date into a string. Format is "HH:mm:ss". if Options.SendDate is true , date is added in front
            </summary>
            <remarks>
            This method will be called at most once per second and the result will be
            reused if it is needed again during the same second.
            </remarks>
            <param name="dateToFormat">The date to render into a string.</param>
            <param name="buffer">The string builder to write to.</param>
        </member>
        <member name="M:TraceTool.TTrace.FormatDate(System.DateTime)">
            <summary>
            Renders the date into a string. Format is "HH:mm:ss,SSS".
            </summary>
            <remarks>
            <para>Uses the FormatDateWithoutMillis() method to generate the
            time string up to the seconds and then appends the current
            milliseconds. The results from FormatDateWithoutMillis() are
            cached and FormatDateWithoutMillis() is called at most once
            per second.</para>
            <para>Sub classes should override FormatDateWithoutMillis()
            rather than FormatDate().</para>
            </remarks>
            <param name="dateToFormat">The date to render into a string.</param>
            <returns>The stringBuilder passed.</returns>
        </member>
        <member name="T:TraceTool.TTraceOptions">
            <summary>
            Options for the traces.
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendMode">
            <summary>
            WinMsg (for desktop applications only), Socket (ASP , services, or remote computer), WebSocket (webAssembly), None (No messages are send, use local log)
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.UseWorkerThread">
            <summary>
            Use a background thread to send traces to the viewer. Default is true. 
            Set to false for async mode (web assembly)
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SocketHost">
            <summary>
            The Socket Host address
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SocketPort">
            <summary>
            The socket port
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SocketUdp">
            <summary>
            Indicate if the socket use the Udp protocol
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendModifiers">
            <summary>
            indicate if the reflection should display modifiers (public class,...)
            </summary>
            
        </member>
        <member name="F:TraceTool.TTraceOptions.SendClassInfo">
            <summary>
            indicate if the reflection should display class info (assembly,guid,...) and bases classes names
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendFields">
            <summary>
            indicate if the reflection should display fields values
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendCustomAttributes">
            <summary>
            indicate if the reflection should display custom attributes
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendNonPublic">
            <summary>
            indicate if the reflection should display non public (private and protected) members
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendInherited">
            <summary>
            indicate if the reflections should display inherited members
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendEvents">
            <summary>
            indicate if the reflections should display the events
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendFunctions">
            <summary>
            indicate if the reflection should display functions
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendDoc">
            <summary>
            indicate if the reflection should display documentation for type, fields, methods,..
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendPrivate">
            <summary>
            indicate if the reflection should also display private members. Default is false
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.ObjectTreeDepth">
            <summary>
            Max Object tree depth for SendValue and Watches
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendTypeWithValue">
            <summary>
            Indicate if SendValue and AddValue function should display members type. Default is true
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendProcessName">
            <summary>
            indicate if the process name must be send. Displayed on the status bar.
            </summary>
        </member>
        <member name="P:TraceTool.TTraceOptions.Framework">
            <summary>
            Framework type (DotNet framework, Dot net standard 1.6, DotNet standard 2.0)
            </summary>
        </member>
        <member name="P:TraceTool.TTraceOptions.SendDate">
            <summary>
            indicate if the date must be send with the time.
            </summary>
        </member>
        <member name="F:TraceTool.TTraceOptions.SendThreadId">
            <summary>
            indicate if the thread id must be send.
            </summary>
        </member>
        <member name="M:TraceTool.TTraceOptions.GetDefault">
            <summary>
            return default TraceDisplayFlags options if you don't supply one for the AddObject / AddType / SendObject / SendType functions .
            </summary>
        </member>
        <member name="T:TraceTool.TTraceWriter">
            <summary>
            TextWriter output. For Linq to SQL for example : NORTHWNDDataContext.Log = TTrace.Out 
            </summary>
        </member>
        <member name="T:TraceTool.WinTrace">
            <summary>
            WinTrace represent a windows tree where you put traces
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.#ctor">
            <summary>
            WinTrace constructor : you can map a WinTrace to an existing window
            Nothing is send to the viewer
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.#ctor(System.String,System.String)">
            <summary>
            WinTrace constructor. The Window Trace is create on the viewer (if not already done)
            </summary>
            <param name="winTraceId">Required window trace Id. If empty, a guid will be generated</param>
            <param name="winTraceText">The Window Title on the viewer.If empty, a default name will be used</param>
        </member>
        <member name="P:TraceTool.WinTrace.Warning">
            <summary>
            Warning, Error and Debug are the 3 doors to send traces
            <example> This sample shows how to send a sample trace.
            <code>
            TTrace.Error.Send ("Hello", "world") ;       // 2 columns
            TTrace.Warning.Send ("Hello") ;              // 1 columns
            TTrace.Debug.SendObject("MyObject" , this) ; // 1 columns + members tree
            </code>
            </example>
            </summary>
        </member>
        <member name="P:TraceTool.WinTrace.Error">
            <summary>
            Warning, Error and Debug are the 3 doors to send traces
            <example> This sample shows how to send a sample trace.
            <code>
            TTrace.Error.Send ("Hello", "world") ;       // 2 columns
            TTrace.Warning.Send ("Hello") ;              // 1 columns
            TTrace.Debug.SendObject("MyObject" , this) ; // 1 columns + members tree
            </code>
            </example>
            </summary>
        </member>
        <member name="P:TraceTool.WinTrace.Debug">
            <summary>
            Warning, Error and Debug are the 3 doors to send traces
            <example> This sample shows how to send a sample trace.
            <code>
            TTrace.Error.Send ("Hello", "world") ;       // 2 columns
            TTrace.Warning.Send ("Hello") ;              // 1 columns
            TTrace.Debug.SendObject("MyObject" , this) ; // 1 columns + members tree
            </code>
            </example>
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.SaveToTextfile(System.String)">
            <summary>
            Save the window tree traces to a text file
            </summary>
            <param name="fileName">file to save</param>
        </member>
        <member name="M:TraceTool.WinTrace.SaveToXml(System.String)">
            <summary>
            Save the window tree traces to an XML file
            </summary>
            <param name="fileName">file to save</param>
        </member>
        <member name="M:TraceTool.WinTrace.SaveToXml(System.String,System.String)">
            <summary>
            Save the window tree traces to an XML file
            </summary>
            <param name="fileName">file to save</param>
            <param name="styleSheet">optional StyleSheet file name added in xml</param>
        </member>
        <member name="M:TraceTool.WinTrace.LoadXml(System.String)">
            <summary>
            Load an XML file to the window tree traces
            </summary>
            <param name="fileName">file to open</param>
        </member>
        <member name="M:TraceTool.WinTrace.DisplayWin">
            <summary>
            Show the window tree
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.SetMultiColumn">
            <summary>
            change the tree to display user defined multiple columns
            must be called before setting column titles. The first column is the main column
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.SetMultiColumn(System.Int32)">
            <summary>
            change the tree to display user defined multiple columns
            must be called before setting column titles
            </summary>
            <param name="mainColIndex">The Main column index (default is 0)</param>
        </member>
        <member name="M:TraceTool.WinTrace.SetLogFile(System.String,System.Int32)">
            <summary>
              Set the log file.(Path is relative to the viewer). To enabled
              log on local AND on the viewer call this function twice. To
              don't use the viewer, set the TTrace.options.SendMode to
              None.
              <code>
              The Mode can be one of the following :
              0, Viewer Log is disabled.
              1, Viewer log enabled. No size limit.
              2, Viewer log enabled. A new file is create each day (CCYYMMDD is appended to the filename)
              3, Local log is disabled
              4, Local log enabled. No size limit.
              5, Local log enabled. A new file is create each day (CCYYMMDD is appended to the filename).
              </code>
              </summary>
              <param name="fileName">\File to open</param>
              <param name="mode">Local and viewer site log mode. </param>                                 
        </member>
        <member name="M:TraceTool.WinTrace.SetLogFile(System.String,System.Int32,System.Int32)">
            <summary>
              Set the log file.(Path is relative to the viewer). To enabled
              log on local AND on the viewer call this function twice. To
              don't use the viewer, set the TTrace.options.SendMode to
              None.
              <code>
              The Mode can be one of the following :
              0, Viewer Log is disabled.
              1, Viewer log enabled. No size limit.
              2, Viewer log enabled. A new file is create each day (CCYYMMDD is appended to the filename)
              3, Local log is disabled
              4, Local log enabled. No size limit. 
              5, Local log enabled. A new file is create each day (CCYYMMDD is appended to the filename). 
              </code>
              </summary>
              <param name="fileName">\File to open</param>
              <param name="mode">Local and viewer site log mode. </param>
              <param name="maxLines">Number of lines before starting a new
                                     \file (default \: \-1 = unlimited). </param>                         
        </member>
        <member name="M:TraceTool.WinTrace.GetLocalLogFile">
            <summary>
              Return the last local log file. (when mode 4 or 5 is used). Note : Call TTrace.Flush() to ensure traces are saved
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.SetColumnsTitle(System.String)">
            <summary>
            set columns title
            </summary>
            <param name="titles">Tab separated columns titles
            Example : Title1 \t title2
            </param>
        </member>
        <member name="M:TraceTool.WinTrace.SetColumnsWidth(System.String)">
            <summary>
            set columns widths
            </summary>
            <param name="widths">Tab separated columns width.
            The format for each column is width[:Min[:Max]] <p/>
            where Min and Max are optional minimum and maximum column width for resizing purpose.<p/>
            Example : 100:20:80 \t 200:50 \t 100
            </param>
        </member>
        <member name="M:TraceTool.WinTrace.GotoFirstNode">
            <summary>
            Set the focus to the first trace node
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.GotoLastNode">
            <summary>
            Set the focus to the last trace node
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.FindNext(System.Boolean)">
            <summary>
            Set the focus to the next matching node
            </summary>
            <param name="searForward">If true search down, else search up  </param>
        </member>
        <member name="M:TraceTool.WinTrace.GotoBookmark(System.Int32)">
            <summary>
            Set the focus to a bookmarked node identified by his position. Bookmarks are checked by the user or with the node.SetBookmark() function
            </summary>
            <param name="pos">Index of the bookmark </param>
        </member>
        <member name="M:TraceTool.WinTrace.ClearBookmark">
            <summary>
            Clear all bookmarks
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.ClearFilter">
            <summary>
            Clear all filters
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.AddFilter(System.Int32,System.Int32,System.String)">
             <summary>
             Add a filter to node. Multiple calls to this function can be done. Call ApplyFilter() to apply filtering
             </summary>
             <param name="column">Column to apply filter.<p/>
               In multi column mode the first column start at 0 <p/>
               In normal mode : <p/>
               col icone   = 999    <p/>
               col time    = 1      <p/>
               col thread  = 2      <p/>
               col traces  = 3      <p/>
               col Comment = 4      <p/>
               col members = 998
             </param>
             <param name="compare">There is 5 kinds of filters : <p/>
                Equal           = 0  <p/>
                Not equal       = 1  <p/>
                contains       = 2  <p/>
                Don't contains  = 3  <p/>
                (Ignore this filter) = 4 or -1
            </param>
             <param name="text">The text to search (insensitive) </param>
        </member>
        <member name="M:TraceTool.WinTrace.ApplyFilter(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Apply filters after calls to AddFilter().
            </summary>
            <param name="conditionAnd">If true, use an 'AND' condition for each filters, else use a "OR" </param>
            <param name="showMatch">If true, show node that match filter and hide others. If false hide matching node and show others</param>
            <param name="includeChildren">If true, search in subnodes</param>
        </member>
        <member name="M:TraceTool.WinTrace.ClearAll">
            <summary>
            Clear all trace for the window tree
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.Close">
            <summary>
            Close the window tree
            </summary>
        </member>
        <member name="M:TraceTool.WinTrace.CreateResource(System.Int32,System.Int32,System.Int32,System.String)">
             <summary>
             Plugin API : Create a resource.
             </summary>
             <param name="resId">The resource Id (must be >= 100)</param>
             <param name="resType">Resource type. See TraceConst
             <code>
             CST_RES_BUT_RIGHT    : Button on right
             CST_RES_BUT_LEFT     : Button on left
             CST_RES_LABEL_RIGHT  : Label on right
             CST_RES_LABELH_RIGHT : Label on right HyperLink
             CST_RES_LABEL_LEFT   : Label on left
             CST_RES_LABELH_LEFT  : Label on left hyperlink
             CST_RES_MENU_ACTION  : Item menu in the Actions Menu
             CST_RES_MENU_WINDOW  : Item menu in the Windows Menu.
                                    Call CreateResource on the main win trace to create this menu item
             </code>
            </param>
             <param name="resWidth">Width of the resource. Applicable only to button and labels</param>
             <param name="resText">Resource text</param>
        </member>
        <member name="M:TraceTool.WinTrace.DisableResource(System.Int32)">
            <summary>
            Plugin API : Disable tracetool or user created resources
            </summary>
            <param name="resId">The resource Id
            ResId: resource id to disable. Tracetool resources :
            <code>
            CST_ACTION_CUT            : Cut. Same as copy then delete
            CST_ACTION_COPY           : Copy
            CST_ACTION_DELETE         : Delete selected
            CST_ACTION_SELECT_ALL     : Select all
            CST_ACTION_RESIZE_COLS    : Resize columns
            CST_ACTION_VIEW_INFO      : View trace info
            CST_ACTION_VIEW_PROP      : View properties
            CST_ACTION_PAUSE          : Pause
            CST_ACTION_SAVE           : SaveToFile
            CST_ACTION_CLEAR_ALL      : Clear all
            CST_ACTION_CLOSE_WIN      : Close win
            CST_ACTION_LABEL_INFO     : TracesInfo label
            CST_ACTION_LABEL_LOGFILE  : LabelLogFile label
            CST_ACTION_VIEW_MAIN      : View Main trace
            CST_ACTION_VIEW_ODS       : ODS
            CST_ACTION_OPEN_XML       : XML trace -> Tracetool XML traces
            CST_ACTION_EVENTLOG       : Event log
            CST_ACTION_TAIL           : Tail
            </code>
            </param>
        </member>
        <member name="M:TraceTool.WinTrace.SetTextResource(System.Int32,System.String)">
            <summary>
            Plugin API : Set the resource text (tracetool or user created resources), specified by his Id
            </summary>
            <param name="resId">The resource Id </param>
            <param name="resText">Resource text</param>
        </member>
        <member name="M:TraceTool.WinTrace.LinkToPlugin(System.String,System.Int32)">
            <summary>
            Plugin API : Attach a winTrace to a plugin. Many winTrace can be attached to a plugin.
            Note that a plugin don't need to be attached to a WinTrace.
            The plugin is identified by his internal name (not dll name).
            When linked, the plugin can receive event (see ITracePlugin).
            </summary>
            <param name="pluginName">name of the plugin</param>
            <param name="flags">Combinaison of CST_PLUG_ONACTION , CST_PLUG_ONBEFOREDELETE , CST_PLUG_ONTIMER</param>
        </member>
        <member name="T:TraceTool.WinWatch">
            <summary>
            WinWatch represent a windows tree where you put watches
            </summary>
        </member>
        <member name="F:TraceTool.WinWatch.Id">
            <summary>
            The "Required" Id of the window tree, can be any string, or a guid
            The Main window trace Id is empty
            </summary>
        </member>
        <member name="F:TraceTool.WinWatch.Enabled">
            <summary>
            When Enabled is false, all traces are disabled. Default is true.
            </summary>
        </member>
        <member name="F:TraceTool.WinWatch.Tag">
            <summary>
            User variable, provided for the convenience of developers
            </summary>
        </member>
        <member name="M:TraceTool.WinWatch.#ctor">
            <summary>
            WinWatch constructor : you can map a WinWatch to an existing window
            Nothing Is send to the viewer
            </summary>
        </member>
        <member name="M:TraceTool.WinWatch.#ctor(System.String,System.String)">
            <summary>
            WinWatch constructor. The Window Watch is create on the viewer (if not already done)
            </summary>
            <param name="winWatchId">Required window trace Id. If empty, a guid will be generated</param>
            <param name="winWatchText">The Window Title on the viewer.If empty, a default name will be used</param>
        </member>
        <member name="M:TraceTool.WinWatch.DisplayWin">
            <summary>
            Put the window in foreground
            </summary>
        </member>
        <member name="M:TraceTool.WinWatch.ClearAll">
            <summary>
            Clear all the watches
            </summary>
        </member>
        <member name="M:TraceTool.WinWatch.Close">
            <summary>
            Clear all the watches
            </summary>
        </member>
        <member name="M:TraceTool.WinWatch.Send(System.String,System.Object)">
            <summary>
            Send a watch
            </summary>
            <param name="watchName">Watch name</param>
            <param name="watchValue">Watch value</param>
        </member>
    </members>
</doc>
